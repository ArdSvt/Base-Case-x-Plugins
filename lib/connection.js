const {
Â  Â  Browsers,
Â  Â  DisconnectReason,
Â  Â  useMultiFileAuthState,
Â  Â  fetchLatestBaileysVersion,
Â  Â  makeCacheableSignalKeyStore
} = require("@ardsvt/baileys");

const pino = require("pino");
const chalk = require("chalk");
const { join, resolve } = require("path");
const { makeWASocket } = require("./simple.js");

let conn = null;
let conns = new Map();
const authFolder = "sessions/";

const logger = pino({ level: "silent" });

const authStatePromise = useMultiFileAuthState(join(authFolder, "parent"));

async function start(_conn = null, opts = {}) {
Â  Â  const { authState } = opts;
Â  Â  const { version, isLatest } = await fetchLatestBaileysVersion();
Â  Â  console.log(`using WA v${version.join('.')}, isLatest: ${isLatest}`);

Â  Â  const socketConfig = {
Â  Â  Â  Â  version,
Â  Â  Â  Â  logger,
Â  Â  Â  Â  printQRInTerminal: !(opts.usePairingCode || opts.isChild),
Â  Â  Â  Â  browser: Browsers.ubuntu("Chrome"),
        qrTimeout: 60000,
Â  Â  Â  Â  auth: {
Â  Â  Â  Â  Â  Â  creds: authState.state.creds,
Â  Â  Â  Â  Â  Â  keys: makeCacheableSignalKeyStore(authState.state.keys, logger.child({ stream: "store" }))
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const sock = makeWASocket(socketConfig, {
Â  Â  Â  Â  ...(_conn && _conn?.chats ? { chats: _conn.chats } : {})
Â  Â  });

Â  Â  if (_conn) {
Â  Â  Â  Â  sock.isInit = _conn.isInit;
Â  Â  Â  Â  sock.isReloadInit = _conn.isReloadInit;
Â  Â  }

Â  Â  if (sock.isInit == null) {
Â  Â  Â  Â  sock.isInit = false;
Â  Â  Â  Â  sock.isReloadInit = true;
Â  Â  }

Â  Â  await reload(sock, false, opts).catch(console.error);
Â  Â  return sock;
}

let oldHandler = null;

async function reload(sock, force = false, opts = {}) {
    if (!opts.handler) opts.handler = require("../client.js")
    if (opts.handler instanceof Promise) opts.handler = await opts.handler;
Â  Â  if (!opts.handler && oldHandler) opts.handler = oldHandler;
Â  Â  oldHandler = opts.handler;

Â  Â  const isReloadInit = !!sock.isReloadInit;
Â  Â  if (force) {
Â  Â  Â  Â  console.log("restarting connection...");
Â  Â  Â  Â  try { sock.ws.close(); } catch { }
Â  Â  Â  Â  sock.ev.removeAllListeners();
Â  Â  Â  Â  Object.assign(sock, await start(sock, opts) || {});
Â  Â  }

Â  Â  Object.assign(sock, messageConfig());

Â  Â  if (!isReloadInit) {
Â  Â  Â  Â  console.log("closing connection...");
Â  Â  Â  Â  if (sock.credsUpdate) sock.ev.off("creds.update", sock.credsUpdate);
Â  Â  Â  Â  if (sock.handler) sock.ev.off("messages.upsert", sock.handler);
Â  Â  Â  Â  if (sock.participantsUpdate) sock.ev.off("group-participants.update", sock.participantsUpdate);
Â  Â  Â  Â  if (sock.groupsUpdate) sock.ev.off("groups.update", sock.groupsUpdate);
Â  Â  Â  Â  if (sock.onDelete) sock.ev.off("message.delete", sock.onDelete);
Â  Â  Â  Â  if (sock.connectionUpdate) sock.ev.off("connection.update", sock.connectionUpdate);
Â  Â  }

Â  Â  if (opts.handler) {
Â  Â  Â  Â  if (opts.handler?.handler) sock.handler = opts.handler.handler.bind(sock);
Â  Â  Â  Â  if (opts.handler?.participantsUpdate) sock.participantsUpdate = opts.handler.participantsUpdate.bind(sock);
Â  Â  Â  Â  if (opts.handler?.groupsUpdate) sock.groupsUpdate = opts.handler.groupsUpdate.bind(sock);
Â  Â  Â  Â  if (opts.handler?.deleteUpdate) sock.onDelete = opts.handler.deleteUpdate.bind(sock);
Â  Â  }

Â  Â  if (!opts.isChild) sock.connectionUpdate = connectionUpdate.bind(sock, opts);
Â  Â  sock.credsUpdate = opts.authState?.saveCreds.bind(sock);

Â  Â  if (sock.handler) sock.ev.on("messages.upsert", sock.handler);
Â  Â  if (sock.participantsUpdate) sock.ev.on("group-participants.update", sock.participantsUpdate);
Â  Â  if (sock.groupsUpdate) sock.ev.on("groups.update", sock.groupsUpdate);
Â  Â  if (sock.onDelete) sock.ev.on("message.delete", sock.onDelete);
Â  Â  if (sock.connectionUpdate) sock.ev.on("connection.update", sock.connectionUpdate);
Â  Â  if (sock.credsUpdate) sock.ev.on("creds.update", sock.credsUpdate);

Â  Â  sock.isReloadInit = false;
Â  Â  return true;
}

function messageConfig() {
Â  Â  return {
Â  Â  Â  Â  welcome: "Welcome to @subject, @user\n",
Â  Â  Â  Â  bye: "Goodbye @user ðŸ‘‹",
Â  Â  Â  Â  spromote: "@user sekarang admin!",
Â  Â  Â  Â  sdemote: "@user sekarang bukan admin!",
Â  Â  Â  Â  sDesc: "Deskripsi telah diubah ke \n@desc",
Â  Â  Â  Â  sSubject: "Judul grup telah diubah ke \n@subject",
Â  Â  Â  Â  sIcon: "Icon grup telah diubah!",
Â  Â  Â  Â  sRevoke: "Link group telah diubah ke \n@revoke"
Â  Â  };
}

async function connectionUpdate(opts, update) {
Â  Â  const { receivedPendingNotifications, connection, lastDisconnect, isOnline, isNewLogin } = update;
Â  Â  if (isNewLogin) console.log(chalk.green('Login Berhasil!'));
Â  Â  if (connection == 'connecting') console.log(chalk.redBright('Mengaktifkan Bot, Mohon tunggu sebentar...'));
Â  Â  if (connection == 'open') console.log(chalk.green('Tersambung'));
Â  Â  if (isOnline == true) console.log(chalk.green('Status Aktif'));
Â  Â  if (isOnline == false) console.log(chalk.red('Status Mati'));
Â  Â  if (receivedPendingNotifications) console.log(chalk.yellow('Menunggu Pesan Baru'));
Â  Â  if (connection == "close") {
Â  Â  Â  Â  console.log(chalk.red('koneksi terputus & mencoba menyambung ulang...'));
Â  Â  Â  Â  const status = lastDisconnect?.error?.output?.statusCode || lastDisconnect?.error?.output?.payload?.statusCode;

Â  Â  Â  Â  if (status !== DisconnectReason.loggedOut && status !== DisconnectReason.blockedNumber) {
Â  Â  Â  Â  Â  Â  console.log({
Â  Â  Â  Â  Â  Â  Â  Â  status,
Â  Â  Â  Â  Â  Â  Â  Â  message: lastDisconnect.error?.output?.payload?.message ?? lastDisconnect.error?.output?.payload?.statusMessage ?? "",
Â  Â  Â  Â  Â  Â  Â  Â  disconnectReason: DisconnectReason[status]
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  console.log(chalk.red('Connecting...'));
Â  Â  Â  Â  Â  Â  console.log(await reload(this, true, opts).catch(console.error));
Â  Â  Â  Â  }
Â  Â  }

Â  Â  if (global.db?.data == null) await global.loadDatabase();
}

async function importFile(module) {
    module = require(module)
    return module;
}

const opts = {
Â  Â  authState: authStatePromise,
Â  Â  isChild: false,
Â  Â  usePairingCode: false
};

module.exports = {
Â  Â  conn,
Â  Â  opts,
Â  Â  conns,
Â  Â  logger,
Â  Â  authFolder,
Â  Â  start,
Â  Â  reload,
Â  Â  importFile
};
